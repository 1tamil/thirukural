{"version":3,"sources":["views/components/category-viewer/category-list-item.tsx","views/components/category-viewer/category-viewer.tsx","views/components/category-viewer/category-viewer-container.tsx"],"names":["useStyles","makeStyles","theme","listItem","cursor","position","borderRadius","spacing","WebkitTapHighlightColor","border","paddingLeft","color","palette","secondary","main","listIcon","display","justifyContent","alignItems","TreeListItem","level","hasNodes","isOpen","label","toggleNode","focused","onClick","active","classes","ListItem","ev","className","ListItemText","disableTypography","primary","AnimatedExpandedIcon","isExpanded","treeMenuContainer","outlineStyle","list","padding","CategoryViewer","props","debug","items","List","map","key","itemProps","CategoryViewerContainer","history","useHistory","React","useState","categoryFilter","setCategoryFilter","chapterQueryParam","URLSearchParams","location","search","get","routeKey","pathname","replace","RegExp","ROUTE_CONSTANTS","LIST_CATEGORY","sections","useSelector","st","kuralIndexMap","section","useSubCategory","getLiteraturesBySection","getChaptersByLiterature","TREE_DATA","Object","values","s","sIndex","id","toString","value","index","nodes","lit","litIndex","ch","chIndex","Select","native","onChange","e","target","inputProps","it","i","toUpperCase","initialActiveKey","initialFocusKey","initialOpenNodes","split","substring","indexOf","length","getInitialOpenNodes","onClickItem","item","newRoute","lastItemSeparator","lastIndexOf","chapter","literatureRoute","currentRoute","push","data","hasSearch"],"mappings":"+TAOMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,SAAU,CACRC,OAAQ,UACRC,SAAU,WACVC,aAAcJ,EAAMK,QAAQ,GAC5BC,wBAAyB,cACzBC,OAAQ,OACR,YAAa,CACXC,YAAaR,EAAMK,QAAQ,IAE7B,YAAa,CACXG,YAAaR,EAAMK,QAAQ,IAE7B,YAAa,CACXG,YAAaR,EAAMK,QAAQ,IAE7B,aAAc,CACZI,MAAOT,EAAMU,QAAQC,UAAUC,MAEjC,cAAe,CACbH,MAAO,mBACPF,OAAQ,cAGZM,SAAU,CACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,cAIHC,EAAuC,SAAC,GAUhC,IAAD,IATlBC,aASkB,MATV,EASU,EARlBC,EAQkB,EARlBA,SACAC,EAOkB,EAPlBA,OACAC,EAMkB,EANlBA,MACAC,EAKkB,EALlBA,WACAC,EAIkB,EAJlBA,QACAC,EAGkB,EAHlBA,QACAC,EAEkB,EAFlBA,OAGMC,GADY,+FACF5B,KAMhB,OACE,eAAC6B,EAAA,EAAD,CACEH,QANmB,SAACI,GACtBT,GAAYG,GAAcA,IAC1BE,EAAQI,IAKNC,UAAS,UAAKH,EAAQzB,SAAb,kBAA+BiB,EAA/B,YAAwCK,GAAW,WAAnD,YACPE,GAAU,aAHd,UAKE,cAACK,EAAA,EAAD,CAAcC,mBAAiB,EAACC,QAASX,IACxCF,GACC,qBAAKU,UAAWH,EAAQb,SAAxB,SACE,cAACoB,EAAA,EAAD,CAAsBC,WAAYd,UCvDtCtB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCmC,kBAAmB,CACjB,QAAS,CACPC,aAAc,SAGlBC,KAAM,CACJC,QAAQ,OAAD,OAAStC,EAAMK,QAAQ,GAAvB,WAQEkC,EAAgD,SAAC,GAGnC,EAFzBV,UAE0B,IADvBW,EACsB,6BACnBd,EAAU5B,IAEhB,OADA2C,gBAAM,0BAEJ,qBAAKZ,UAAWH,EAAQS,kBAAxB,SACE,cAAC,IAAD,2BAAcK,GAAd,aACG,gBAAGE,EAAH,EAAGA,MAAH,OACC,cAACC,EAAA,EAAD,CAAMd,UAAWH,EAAQW,KAAzB,SACGK,EAAME,KAAI,gBAAGC,EAAH,EAAGA,IAAQC,EAAX,8BACT,cAAC,EAAD,eAA4BA,GAATD,eClBpBE,EAAkE,SAC7EP,GAEA,IAAMQ,EAAUC,cADb,EAEyCC,IAAMC,SAChD,WAHC,mBAEIC,EAFJ,KAEoBC,EAFpB,KAMGC,EADc,IAAIC,gBAAgBP,EAAQQ,SAASC,QACnBC,IAAI,WACpCC,EAAWX,EAAQQ,SAASI,SAASC,QAEzC,IAAIC,OAAJ,UAAcC,IAAgBC,cAA9B,SACA,IAYIC,EAAWC,aAAY,SAACC,GAAD,OAAkBA,EAAGC,cAAcC,WAtB7D,EAuB0DC,cAvB1D,mBAuBMC,EAvBN,KAuB+BC,EAvB/B,KAwBGC,EAA+BC,OAAOC,OAAOV,GAAUrB,KAC3D,SAACgC,EAAGC,GAAJ,MAAgB,CACdhC,IAAK+B,EAAEE,GAAGC,WACV1D,MAAOuD,EAAEI,MACTC,MAAOJ,EACPK,MAAOX,EAAwBK,EAAEE,IAAIlC,KAAI,SAACuC,EAAKC,GAAN,MAAoB,CAC3DvC,IAAKsC,EAAIL,GAAGC,WACZ1D,MAAO8D,EAAIH,MACXC,MAAOG,EACPF,MAAOV,EAAwBW,EAAIL,IAAIlC,KAAI,SAACyC,EAAIC,GAAL,MAAkB,CAC3DzC,IAAKwC,EAAGP,GAAGC,WACX1D,MAAOgE,EAAGL,MACVC,MAAOK,cAkBf,OACE,qCAEE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNR,MAAO5B,EACPqC,SAAU,SAACC,GAAD,OAAOrC,EAAkBqC,EAAEC,OAAOX,QAC5CY,WAAY,CACVd,GAAI,mBALR,SAOI,CAAC,UAAW,aAAc,UAAW,SAAwBlC,KAC7D,SAACiD,EAAIC,GAAL,OACE,wBAAgBd,MAAOa,EAAvB,SACGA,EAAGE,eADOD,QAMnB,cAAC,EAAD,CACEE,iBAAkBrC,EAClBsC,gBACE3C,EAAiB,UAAMK,EAAN,YAAkBL,GAAsBK,EAE3DuC,iBAjEsB,WAC1B,IAAMhB,EAAQvB,EACXwC,MAAM,KACNvD,KAAI,SAACiD,GAAD,OAAQlC,EAASyC,UAAU,EAAGzC,EAAS0C,QAAQR,GAAMA,EAAGS,WAI/D,OAHqB,IAAjBpB,EAAMoB,QAAgBpB,EAAM,KAAOA,EAAM,KAC3CA,EAAM,GAAN,UAAcA,EAAM,GAApB,YAA0BA,EAAM,KAE3BA,EA0DeqB,GAClBC,YArCc,SAACC,GACnB,IAAMC,EAAQ,UAAM3C,IAAgBC,cAAtB,YAAuCyC,EAAK5D,KAC1D,GAAK4D,EAAKtF,SAQR6B,EAAQa,QAAQ6C,OARE,CAClB,IAAMC,EAAoBF,EAAK5D,IAAI+D,YAAY,KACzCC,EAAUJ,EAAK5D,IAAIuD,UAAUO,EAAoB,GACjDG,EAAkBL,EAAK5D,IAAIuD,UAAU,EAAGO,GACxCI,EAAY,UAAMhD,IAAgBC,cAAtB,YAAuC8C,EAAvC,oBAAkED,GACpF7D,EAAQa,QAAQkD,GAChB/D,EAAQgE,KAAKN,KA8BXO,KAAMxC,EACNyC,WAAW,QAMJnE","file":"static/js/8.29a8e31c.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport { ListItem, ListItemText, makeStyles } from '@material-ui/core';\nimport { TreeMenuItem } from 'react-simple-tree-menu';\n\nimport { AnimatedExpandedIcon } from '../common/AnimatedExpandedIcon';\n\nconst useStyles = makeStyles((theme) => ({\n  listItem: {\n    cursor: 'pointer',\n    position: 'relative',\n    borderRadius: theme.spacing(2),\n    WebkitTapHighlightColor: 'transparent',\n    border: 'none',\n    '&.level-0': {\n      paddingLeft: theme.spacing(2),\n    },\n    '&.level-1': {\n      paddingLeft: theme.spacing(3),\n    },\n    '&.level-2': {\n      paddingLeft: theme.spacing(4),\n    },\n    '&.on-focus': {\n      color: theme.palette.secondary.main,\n    },\n    '&.is-active': {\n      color: 'var(--app-color)',\n      border: '2px solid',\n    },\n  },\n  listIcon: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}));\n\nexport const TreeListItem: React.FC<TreeMenuItem> = ({\n  level = 0,\n  hasNodes,\n  isOpen,\n  label,\n  toggleNode,\n  focused,\n  onClick,\n  active,\n  ...props\n}: TreeMenuItem) => {\n  const classes = useStyles();\n\n  const toggleCategory = (ev: React.MouseEvent<HTMLLIElement, MouseEvent>) => {\n    hasNodes && toggleNode && toggleNode();\n    onClick(ev);\n  };\n  return (\n    <ListItem\n      onClick={toggleCategory}\n      className={`${classes.listItem} level-${level} ${focused && 'on-focus'} ${\n        active && 'is-active'\n      }`}>\n      <ListItemText disableTypography primary={label}></ListItemText>\n      {hasNodes && (\n        <div className={classes.listIcon}>\n          <AnimatedExpandedIcon isExpanded={isOpen} />\n        </div>\n      )}\n    </ListItem>\n  );\n};\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nimport { List, makeStyles } from '@material-ui/core';\nimport { debug } from 'loglevel';\nimport TreeMenu, { TreeMenuProps } from 'react-simple-tree-menu';\n\nimport { TreeListItem } from './category-list-item';\n\nconst useStyles = makeStyles((theme) => ({\n  treeMenuContainer: {\n    '&>div': {\n      outlineStyle: 'none',\n    },\n  },\n  list: {\n    padding: `0px ${theme.spacing(1)}px`,\n  },\n}));\n\ntype CategoryViewerProps = {\n  className?: string;\n} & TreeMenuProps;\n\nexport const CategoryViewer: React.FC<CategoryViewerProps> = ({\n  className,\n  ...props\n}: CategoryViewerProps) => {\n  const classes = useStyles();\n  debug('CategoryViewer renders');\n  return (\n    <div className={classes.treeMenuContainer}>\n      <TreeMenu {...props}>\n        {({ items }) => (\n          <List className={classes.list}>\n            {items.map(({ key, ...itemProps }) => (\n              <TreeListItem key={key} {...itemProps} />\n            ))}\n          </List>\n        )}\n      </TreeMenu>\n    </div>\n  );\n};\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nimport { Select } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { TreeNodeInArray, Item } from 'react-simple-tree-menu';\nimport { Category } from 'src/lib/api';\n\nimport { useSubCategory } from '../../../lib/hooks';\nimport { ROUTE_CONSTANTS } from '../../../routes';\nimport { AppState } from '../../../state';\nimport { CategoryViewer } from './category-viewer';\n\ntype CategoryViewerContainerProps = {\n  className?: string;\n};\n\nexport const CategoryViewerContainer: React.FC<CategoryViewerContainerProps> = (\n  props: CategoryViewerContainerProps\n) => {\n  const history = useHistory();\n  const [categoryFilter, setCategoryFilter] = React.useState<Category>(\n    'section'\n  );\n  const queryParams = new URLSearchParams(history.location.search);\n  const chapterQueryParam = queryParams.get('chapter');\n  const routeKey = history.location.pathname.replace(\n    // eslint-disable-next-line no-useless-escape\n    new RegExp(`${ROUTE_CONSTANTS.LIST_CATEGORY}(\\/)?`),\n    ''\n  );\n  const getInitialOpenNodes = () => {\n    const nodes = routeKey\n      .split('/')\n      .map((it) => routeKey.substring(0, routeKey.indexOf(it) + it.length));\n    if (nodes.length === 2 && nodes[0] === nodes[1]) {\n      nodes[1] = `${nodes[0]}/${nodes[1]}`;\n    }\n    return nodes;\n  };\n\n  const sections = useSelector((st: AppState) => st.kuralIndexMap.section);\n  const [, getLiteraturesBySection, getChaptersByLiterature] = useSubCategory();\n  const TREE_DATA: TreeNodeInArray[] = Object.values(sections).map(\n    (s, sIndex) => ({\n      key: s.id.toString(),\n      label: s.value,\n      index: sIndex,\n      nodes: getLiteraturesBySection(s.id).map((lit, litIndex) => ({\n        key: lit.id.toString(),\n        label: lit.value,\n        index: litIndex,\n        nodes: getChaptersByLiterature(lit.id).map((ch, chIndex) => ({\n          key: ch.id.toString(),\n          label: ch.value,\n          index: chIndex,\n        })),\n      })),\n    })\n  );\n  const onItemClick = (item: Item) => {\n    const newRoute = `${ROUTE_CONSTANTS.LIST_CATEGORY}/${item.key}`;\n    if (!item.hasNodes) {\n      const lastItemSeparator = item.key.lastIndexOf('/');\n      const chapter = item.key.substring(lastItemSeparator + 1);\n      const literatureRoute = item.key.substring(0, lastItemSeparator);\n      const currentRoute = `${ROUTE_CONSTANTS.LIST_CATEGORY}/${literatureRoute}?chapter=${chapter}`;\n      history.replace(currentRoute);\n      history.push(newRoute);\n    } else {\n      history.replace(newRoute);\n    }\n  };\n  return (\n    <>\n      {/* TODO: */}\n      <Select\n        native\n        value={categoryFilter}\n        onChange={(e) => setCategoryFilter(e.target.value as Category)}\n        inputProps={{\n          id: 'category-filter',\n        }}>\n        {(['section', 'literature', 'chapter', 'kural'] as Category[]).map(\n          (it, i) => (\n            <option key={i} value={it}>\n              {it.toUpperCase()}\n            </option>\n          )\n        )}\n      </Select>\n      <CategoryViewer\n        initialActiveKey={routeKey}\n        initialFocusKey={\n          chapterQueryParam ? `${routeKey}/${chapterQueryParam}` : routeKey\n        }\n        initialOpenNodes={getInitialOpenNodes()}\n        onClickItem={onItemClick}\n        data={TREE_DATA}\n        hasSearch={false}\n      />\n    </>\n  );\n};\n\nexport default CategoryViewerContainer;\n"],"sourceRoot":""}