{"version":3,"sources":["views/components/kural/RouteViewer.tsx","views/components/kural/KuralDetail.tsx","views/components/kural/KuralDetailViewer.tsx"],"names":["useStyles","makeStyles","theme","routeContainer","display","root","flexDirection","justifyContent","alignItems","flexWrap","chipRoot","padding","fontSize","height","margin","spacing","breakpoints","up","maxWidth","paddingLeft","favoriteIcon","width","RouteChip","route","onLongPress","classes","useNavigation","navigateTo","longPressEventHandlers","useLongPress","isFavourite","icon","className","size","label","value","color","onClick","style","backgroundColor","RouteViewer","props","useRoute","routes","toggleRouteFavourite","clsx","map","item","index","renderRight","transliteratorList","cursor","userSelect","only","minHeight","marginBottom","kural","borderBottom","fontWeight","transliteration","fontFamily","paddingTop","paddingBottom","textAlign","WebkitTextStrokeWidth","WebkitTextStroke","letterSpacing","KuralDetail","useKuralDetail","kuralDetail","transliterators","KuralCard","componentType","List","transliteratorId","id","name","ListItem","Chip","SwiperCore","use","Virtual","Keyboard","KuralDetailViewer","history","useHistory","INDEX_MAP","useSelector","st","kuralIndexMap","params","useParams","KURAL_NO","parseInt","React","useState","activeKuralNo","setActiveKuralNo","slideKuralIds","Array","from","ITEMS_COUNT_MAP","keys","i","useEffect","newRoute","ROUTE_CONSTANTS","LIST_DETAIL","findCategoryRouteMapString","log","info","replace","isCategoryValid","Container","disableGutters","autoHeight","keyboard","grabCursor","initialSlide","spaceBetween","slidesPerView","allowSlideNext","length","virtual","onTransitionEnd","swiper","activeIndex","kId","virtualIndex","renderSlide"],"mappings":"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","file":"static/js/6.9ad72c49.chunk.js","sourcesContent":["import React from 'react';\n\nimport { makeStyles, Chip } from '@material-ui/core';\nimport { Favorite } from '@material-ui/icons';\nimport clsx from 'clsx';\nimport {\n  useRoute,\n  useNavigation,\n  useLongPress,\n  RouteProp,\n} from 'src/lib/hooks';\n\nconst useStyles = makeStyles((theme) => ({\n  routeContainer: {\n    display: 'flex',\n  },\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'start',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n  },\n  chipRoot: {\n    padding: '0px 0.6em',\n    fontSize: '0.7rem',\n    height: '1.3rem',\n    margin: `0 ${theme.spacing(1 / 2)}px ${theme.spacing(1 / 2)}px 0`,\n    [theme.breakpoints.up('sm')]: {\n      maxWidth: 200,\n    },\n    '&.fav ': {\n      '& .label': {\n        paddingLeft: theme.spacing(0.5),\n      },\n    },\n  },\n  favoriteIcon: {\n    width: '0.7rem',\n    height: '0.7rem',\n    margin: 0,\n  },\n}));\n\nexport type KuralChipItem = {\n  label: string;\n  navRoute: string;\n  color: 'default' | 'primary' | 'secondary';\n};\ntype RouteViewerProps = {\n  className?: string;\n  renderRight?: React.ReactNode;\n};\n\ntype RouteChipProps = {\n  route: RouteProp;\n  onLongPress?: (route: RouteProp) => void;\n};\n\nconst RouteChip: React.FC<RouteChipProps> = ({\n  route,\n  onLongPress,\n}: RouteChipProps) => {\n  const classes = useStyles();\n  const [navigateTo] = useNavigation();\n  const longPressEventHandlers = useLongPress(() => {\n    onLongPress && onLongPress(route);\n  });\n  // TODO: longpress should not trigger click event\n  return (\n    <Chip\n      {...(route.isFavourite\n        ? { icon: <Favorite className={classes.favoriteIcon} /> }\n        : {})}\n      {...longPressEventHandlers}\n      size='small'\n      label={route.value}\n      color={'primary'}\n      onClick={(): void => {\n        route.route && navigateTo(route.route)();\n      }}\n      style={{ backgroundColor: route.color }}\n      classes={{\n        root: `${classes.chipRoot} ${route.isFavourite && 'fav'}`,\n        label: 'label',\n      }}\n    />\n  );\n};\n\nconst RouteViewer: React.FC<RouteViewerProps> = (props: RouteViewerProps) => {\n  const classes = useStyles();\n  const [, routes, toggleRouteFavourite] = useRoute({});\n  return (\n    <div className={clsx(classes.routeContainer, props.className)}>\n      <div className={classes.root}>\n        {routes.map((item, index) => (\n          <RouteChip\n            route={item}\n            key={index}\n            onLongPress={(route: RouteProp) => toggleRouteFavourite(route)}\n          />\n        ))}\n      </div>\n      {props.renderRight}\n    </div>\n  );\n};\n\nexport default RouteViewer;\n","import React from 'react';\n\nimport { makeStyles, ListItem, Chip, List } from '@material-ui/core';\nimport { Kural } from 'src/lib/api';\nimport { useKuralDetail } from 'src/lib/hooks';\n\nimport KuralCard from './KuralCard';\n\nconst useStyles = makeStyles((theme) => ({\n  transliteratorList: {\n    cursor: 'grab',\n    userSelect: 'none',\n    padding: theme.spacing(1),\n    [theme.breakpoints.only('xs')]: {\n      minHeight: 400,\n    },\n    '& li:not(:last-child)': {\n      marginBottom: theme.spacing(1),\n    },\n  },\n  kural: {\n    padding: theme.spacing(1),\n    borderBottom: 'unset',\n    color: 'brown',\n    fontWeight: 600,\n    '& .kural-badge': {\n      display: 'none',\n    },\n  },\n  transliteration: {\n    padding: 0,\n    flexDirection: 'column',\n    alignItems: 'self-end',\n\n    '& .transliterator-name': {\n      fontSize: '0.7em',\n      height: '1.5em',\n      backgroundColor: 'var(--app-secondary-color)',\n      fontFamily: 'var(--app-font-family)',\n      fontWeight: 'bold',\n    },\n    '& .content': {\n      fontSize: '0.9em',\n      paddingTop: theme.spacing(0.5),\n      paddingBottom: theme.spacing(0.5),\n      textAlign: 'justify',\n      WebkitTextStrokeWidth: '0.2px',\n      WebkitTextStroke: 'thin',\n      letterSpacing: 1,\n    },\n  },\n}));\n\ntype KuralDetailProps = {\n  className?: string;\n  kural: Kural | number;\n};\n\nconst KuralDetail: React.FC<KuralDetailProps> = (props: KuralDetailProps) => {\n  const classes = useStyles();\n  const [kural, kuralDetail, transliterators] = useKuralDetail(props.kural);\n  return (\n    <>\n      {kural && (\n        <KuralCard\n          kural={kural}\n          className={classes.kural}\n          componentType='div'></KuralCard>\n      )}\n      <List\n        className={props.className}\n        classes={{ root: classes.transliteratorList }}\n        {...props}>\n        {kuralDetail &&\n          transliterators.map(({ id: transliteratorId, name }) => (\n            <ListItem\n              key={transliteratorId}\n              className={classes.transliteration}>\n              <Chip\n                size='small'\n                label={name}\n                color={'primary'}\n                className={'transliterator-name'}\n              />\n              <div className={'content'}>{kuralDetail[transliteratorId]}</div>\n            </ListItem>\n          ))}\n      </List>\n    </>\n  );\n};\n\nexport default KuralDetail;\n","import React from 'react';\n\nimport { Container, makeStyles } from '@material-ui/core';\nimport log, { debug } from 'loglevel';\nimport { useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport {\n  findCategoryRouteMapString,\n  isCategoryValid,\n  ITEMS_COUNT_MAP,\n} from 'src/lib/api';\nimport { ROUTE_CONSTANTS } from 'src/routes';\nimport { AppState } from 'src/state';\nimport SwiperCore, { Virtual, Keyboard } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/swiper.scss';\nimport './swiper-custom.scss';\n\nimport KuralDetail from './KuralDetail';\nimport RouteViewer from './RouteViewer';\n\nSwiperCore.use([Virtual, Keyboard]);\n\ntype KuralDetailViewerProps = {\n  className?: string;\n};\n\nconst useStyles = makeStyles((theme) => ({\n  routes: {\n    padding: theme.spacing(1),\n  },\n}));\n\nconst KuralDetailViewer: React.FC<KuralDetailViewerProps> = (\n  props: KuralDetailViewerProps\n) => {\n  const history = useHistory();\n  const classes = useStyles();\n  const INDEX_MAP = useSelector((st: AppState) => st.kuralIndexMap.index);\n  const params = useParams<{ kural: string }>();\n  const KURAL_NO = parseInt(params.kural);\n  const [activeKuralNo, setActiveKuralNo] = React.useState(KURAL_NO);\n  const slideKuralIds = Array.from(Array(ITEMS_COUNT_MAP.kural).keys()).map(\n    (i) => i + 1\n  );\n  const renderSlide = (kId: number, index: number) => (\n    <SwiperSlide key={kId} virtualIndex={index}>\n      <KuralDetail kural={kId} />\n    </SwiperSlide>\n  );\n\n  React.useEffect(() => {\n    if (INDEX_MAP) {\n      const newRoute = `${\n        ROUTE_CONSTANTS.LIST_DETAIL\n      }/${findCategoryRouteMapString(INDEX_MAP, { kural: activeKuralNo })}`;\n      log.info('KuralDetailViewer replace route to =>', newRoute);\n      history.replace(newRoute);\n    }\n  }, [INDEX_MAP, activeKuralNo, history]);\n\n  if (!isCategoryValid('kural', KURAL_NO)) {\n    return null;\n  }\n  return (\n    <>\n      <Container disableGutters className={classes.routes}>\n        <RouteViewer />\n      </Container>\n      <Swiper\n        autoHeight={true}\n        keyboard={true}\n        grabCursor={true}\n        initialSlide={KURAL_NO - 1}\n        spaceBetween={10}\n        slidesPerView={1}\n        allowSlideNext={\n          slideKuralIds[slideKuralIds.length - 1] !== activeKuralNo\n        }\n        virtual\n        onTransitionEnd={(swiper) => {\n          setActiveKuralNo(swiper.activeIndex + 1);\n        }}>\n        {slideKuralIds.map((kId, index) => renderSlide(kId, index))}\n      </Swiper>\n    </>\n  );\n};\n\nexport default KuralDetailViewer;\n"],"sourceRoot":""}